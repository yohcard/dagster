# Définition du workflow CI/CD
name: CI/CD Workflow

# Déclenchement du workflow lors des pushs sur la branche principale
on:
  push:
    branches:
      - main

jobs:
  check-backend:
    name: Check Backend # Vérification du backend
    runs-on: ubuntu-latest # Le job s'exécute sur une machine virtuelle Ubuntu
    strategy:
      matrix: # Définition d'une matrice de tâches à exécuter
        task:
          - npm audit fix # Correction automatique des vulnérabilités
          - npm run lint # Analyse statique du code
          - npm run test:ci # Exécution des tests CI
    defaults: # Options par défaut pour ce job
      run:
        working-directory: ./backend # Répertoire de travail pour le backend
    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Configuration de l'environnement Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3

      # Étape 3 : Restauration du cache des dépendances Node.js
      - name: Restore Node.js dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.npm # Chemin des dépendances
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Étape 4 : Exécution des tâches définies dans la matrice
      - name: Run matrix
        run: ${{ matrix.check-backend }}

      # Étape 5 : Vérification des résultats des tests
      - name: Verify test results
        if: failure()
        run: echo "Unit tests failed. Check logs for details."

  check-frontend:
    name: Check Frontend # Vérification du frontend
    runs-on: ubuntu-latest # Le job s'exécute sur une machine virtuelle Ubuntu
    strategy:
      matrix: # Définition d'une matrice de tâches à exécuter
        task:
          - npm audit fix # Correction automatique des vulnérabilités
          - npm run lint # Analyse statique du code
    defaults: # Options par défaut pour ce job
      run:
        working-directory: ./frontend # Répertoire de travail pour le frontend
    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Configuration de l'environnement Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3

      # Étape 3 : Installation des dépendances
      - name: Install dependencies
        run: npm ci

      # Étape 4 : Exécution des tâches définies dans la matrice
      - name: Run matrix
        run: ${{ matrix.check-frontend }}

  build-frontend:
    name: Build Frontend # Construction du frontend
    runs-on: ubuntu-latest # Le job s'exécute sur une machine virtuelle Ubuntu
    needs:
      - check-frontend # Ce job dépend de la vérification du frontend
    defaults:
      run:
        working-directory: ./frontend # Répertoire de travail pour le frontend
    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Configuration de l'environnement Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3

      # Étape 3 : Restauration du cache des dépendances Node.js
      - name: Restore Node.js dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Étape 4 : Installation des dépendances
      - name: Install dependencies
        run: npm ci

      # Étape 5 : Construction du projet frontend
      - name: Build frontend
        run: npm run build

      # Étape 6 : Sauvegarde des artefacts générés
      - name: Save build artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/dist
          retention-days: 1 # Durée de rétention de l'artefact

  test-frontend:
    name: Test E2E Frontend # Tests de bout en bout du frontend
    runs-on: ubuntu-latest
    needs:
      - build-frontend # Ce job dépend de la construction du frontend
      - check-backend # Ce job dépend de la vérification du backend
    strategy:
      matrix:
        browser: 
          - firefox
          - chrome
          - edge
    defaults:
      run:
        working-directory: ./ # Répertoire de travail racine
    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Téléchargement des artefacts générés
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/dist

      # Étape 3 : Configuration de l'environnement Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3

      # Étape 4 : Installation des dépendances backend
      - name: Install backend dependencies
        run: cd backend && npm ci --prefer-offline

      # Étape 5 : Démarrage du serveur backend
      - name: Start backend server
        run: cd backend && node index.js &

      # Étape 6 : Exécution des tests E2E avec Cypress
      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        continue-on-error: true # Continue en cas d'erreur
        with:
          working-directory: ./frontend
          browser: ${{ matrix.browser }}
          start: npm run preview
          wait-on: http://localhost:4173
          wait-on-timeout: 60
          config: baseUrl=http://localhost:4173

  deploy_on_test:
    name: Deploy on Test # Déploiement sur l'environnement de test
    runs-on: ubuntu-22.04 # Le job s'exécute sur une machine virtuelle Ubuntu 22.04
    needs:
      - test-frontend # Ce job dépend des tests frontend
    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Téléchargement des artefacts frontend
      - name: Get frontend artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./dist

      # Étape 3 : Connexion au VPN
      - name: Run action VPN
        uses: ./.github/actions/vpn
        with:
          ip: ${{ secrets.VPN_IP }}
          port: ${{ secrets.VPN_PORT }}
          username: ${{ secrets.VPN_USER }}
          password: ${{ secrets.PWDVPN }}
          host_to_ping: ${{ secrets.TEST_VM_IP }}

      # Étape 4 : Transfert des fichiers vers la machine de test
      - name: Executing remote SCP to upload files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_VM_IP }}
          username: ${{ secrets.TEST_VM_USER }}
          password: ${{ secrets.TEST_VM_PASWORD}}
          port: ${{ secrets.TEST_VM_PORT }}
          source: "./backend/*,./dist/*"
          target: ~/www

      # Étape 5 : Exécution des commandes sur la machine de test
      - name: Executing remote SSH commands
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.TEST_VM_IP }}
          username: ${{ secrets.TEST_VM_USER }}
          password: ${{ secrets.TEST_VM_PASWORD }}
          port: ${{ secrets.TEST_VM_PORT }}
          script: |
            cd ~/www/backend && npm install --omit=dev && npm run start:prod && pm2 save
